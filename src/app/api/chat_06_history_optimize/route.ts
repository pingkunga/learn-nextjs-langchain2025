/**
 * ===============================================
 * API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chat ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ Optimize
 * ===============================================
 * 
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
 * - ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô PostgreSQL
 * - ‡∏ó‡∏≥ Summary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î Token
 * - Trim Messages ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô Token Limit
 * - Streaming Response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Real-time Chat
 * - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Session ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */

import { NextRequest } from 'next/server'
import { ChatOpenAI } from '@langchain/openai'
import { ChatPromptTemplate, MessagesPlaceholder } from '@langchain/core/prompts'
import { toUIMessageStream } from '@ai-sdk/langchain'
import { createUIMessageStreamResponse, UIMessage } from 'ai'
import { PostgresChatMessageHistory } from '@langchain/community/stores/message/postgres'
import { Pool } from 'pg'
import { v4 as uuidv4 } from 'uuid' // üëà 1. Import UUID

import { BaseMessage, AIMessage, HumanMessage, SystemMessage, MessageContent } from '@langchain/core/messages'
import { trimMessages } from '@langchain/core/messages'
import { StringOutputParser } from '@langchain/core/output_parsers'
import { encodingForModel } from '@langchain/core/utils/tiktoken'

export const dynamic = 'force-dynamic'
export const maxDuration = 30

// ===============================================
// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PostgreSQL Connection Pool
// ===============================================
/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Connection Pool ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
 * ‡πÉ‡∏ä‡πâ Pool ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Connection ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
 */
/**
 * PostgreSQL Connection Pool
 * ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á pool ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà Global Scope
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å request ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ connection pool ‡∏ô‡∏µ‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
 */
const pool = new Pool({
  host: process.env.PG_HOST,
  port: Number(process.env.PG_PORT),
  user: process.env.PG_USER,
  password: process.env.PG_PASSWORD,
  database: process.env.PG_DATABASE,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
})

// ===============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö Token (Tiktoken)
// ===============================================

/**
 * Type ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Encoder ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ô‡∏±‡∏ö Token
 */
type Encoding = {
  encode: (text: string) => number[]
  free?: () => void
}

let encPromise: Promise<Encoding> | undefined

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠ Encoder
 * Step 1: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ gpt-4o-mini ‡∏Å‡πà‡∏≠‡∏ô
 * Step 2: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô gpt-4
 * Step 3: Cache Encoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
 */
async function getEncoder(): Promise<Encoding> {
  if (!encPromise) {
    encPromise = encodingForModel("gpt-4o-mini").catch(() =>
      encodingForModel("gpt-4")
    )
  }
  return encPromise
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö Token ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
 * Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á content (string, array, ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
 * Step 2: ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö token
 * Step 3: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token
 */
async function strTokenCounter(content: MessageContent): Promise<number> {
  const enc = await getEncoder()
  if (typeof content === 'string') return enc.encode(content).length
  if (Array.isArray(content)) {
    return enc.encode(
      content.map(p => (p.type === 'text' ? p.text : JSON.stringify(p))).join(' ')
    ).length
  }
  return enc.encode(String(content ?? '')).length
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡∏ö Token ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * Step 1: ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * Step 2: ‡∏£‡∏∞‡∏ö‡∏∏ role ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (user, assistant, system)
 * Step 3: ‡∏ô‡∏±‡∏ö token ‡∏Ç‡∏≠‡∏á role ‡πÅ‡∏•‡∏∞ content ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
 * Step 4: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô token ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * 
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà export ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á Next.js type error
 */
async function tiktokenCounter(messages: BaseMessage[]): Promise<number> {
  let total = 0
  for (const m of messages) {
    const role =
      m instanceof HumanMessage
        ? 'user'
        : m instanceof AIMessage
        ? 'assistant'
        : m instanceof SystemMessage
        ? 'system'
        : 'unknown'
    total += await strTokenCounter(role)
    total += await strTokenCounter(m.content)
  }
  return total
}

// ===============================================
// POST API: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö Stream
// ===============================================
/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Chat
 * 
 * Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÉ‡∏ä‡πâ Session ID
 * 2. ‡πÇ‡∏´‡∏•‡∏î Summary ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI Model
 * 4. ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ Trim ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
 * 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt Template
 * 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á Stream Response
 * 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * 8. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Summary
 * 9. ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö
 */
export async function POST(req: NextRequest) {
  try {

    const { messages, sessionId, userId }: {
      messages: UIMessage[]
      sessionId?: string
      userId?: string
    } = await req.json()

    // ===============================================
    // Step 1: Optimistic Session Management
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ DB
    // ===============================================
    const isNewSession = !sessionId
    const currentSessionId = sessionId || uuidv4()

    // ===============================================
    // Step 2: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ó‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)
    // ===============================================
    let persistedSummary = ''
    let fullHistory: BaseMessage[] = []

    if (!isNewSession) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô session ‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á summary ‡πÅ‡∏•‡∏∞ history ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      const [summaryResult, historyResult] = await Promise.all([
        pool.query('SELECT summary FROM chat_sessions WHERE id = $1 LIMIT 1', [currentSessionId]),
        new PostgresChatMessageHistory({ sessionId: currentSessionId, tableName: 'chat_messages', pool }).getMessages()
      ])
      persistedSummary = summaryResult.rows?.[0]?.summary ?? ''
      fullHistory = historyResult
    }

    // ===============================================
    // Step 3: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI Model ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Input ‡∏à‡∏≤‡∏Å User
    // ===============================================
    const model = new ChatOpenAI({
      model: 'gpt-4o-mini',
      temperature: 0.7,
      maxTokens: 1000,
      streaming: true
    })

    const lastUserMessage = messages.filter(m => m.role === 'user').pop()
    const input = lastUserMessage?.parts?.find(p => p.type === 'text')?.text ?? ''
    if (!input) return new Response('No valid user input found.', { status: 400 })

    // ===============================================
    // Step 4: Trim ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    // ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á overflowSummary ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    // ===============================================
    const recentWindow = fullHistory.length > 0
      ? await trimMessages(fullHistory, { maxTokens: 1500, strategy: 'last', tokenCounter: tiktokenCounter })
      : []

    // ===============================================
    // Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÅ‡∏•‡∏∞ Chain
    // ===============================================
    const prompt = ChatPromptTemplate.fromMessages([
      ['system', '‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢'],
      ['system', '‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î): {summary}'],
      new MessagesPlaceholder('recent_window'),
      ['human', '{input}']
    ])
    const chain = prompt.pipe(model).pipe(new StringOutputParser())

    // ===============================================
    // Step 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á Stream ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Pipeline
    // ===============================================
    let assistantText = ''
    const messageHistory = new PostgresChatMessageHistory({
      sessionId: currentSessionId,
      tableName: 'chat_messages',
      pool: pool,
    })

    // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° User ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° stream
    await messageHistory.addUserMessage(input)

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Stream ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö Response
    const stream = await chain.stream({ 
      input, 
      summary: persistedSummary, 
      recent_window: recentWindow 
    })

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á ReadableStream ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const responseStream = new ReadableStream<string>({
      async start(controller) {
        try {
          for await (const chunk of stream) {
            assistantText += chunk
            controller.enqueue(chunk)
          }
          controller.close()
          
          // 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Stream ‡∏à‡∏ö
          if (assistantText) {
            try {
              // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI
              await messageHistory.addMessage(new AIMessage(assistantText))

              // ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Session ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞ Session ‡πÄ‡∏Å‡πà‡∏≤
              if (isNewSession) {
                await createSessionAndUpdateMessages(currentSessionId, userId, messages)
              } else {
                const newHistoryForSummary = [
                  ...recentWindow.map(m => formatMessageForSummary(m)),
                  `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${input}`,
                  `‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: ${assistantText}`
                ].join('\n')
                await updateSessionSummary(currentSessionId, persistedSummary, newHistoryForSummary)
              }
            } catch (bgError) {
              console.error("‚ùå Background task error:", bgError)
            }
          }
        } catch (error) {
          console.error("‚ùå Stream error:", error)
          controller.error(error)
        }
      }
    })

    return createUIMessageStreamResponse({
      stream: toUIMessageStream(responseStream),
      headers: { 'x-session-id': currentSessionId },
    })
  } catch (error) {
    console.error('API Error:', error)
    return new Response(
      JSON.stringify({
        error: 'An error occurred while processing your request',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
}

// ===============================================
// üöÄ Helper Functions: ‡πÅ‡∏¢‡∏Å Logic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
// ===============================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Session ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Temp ID
 */
async function createSessionAndUpdateMessages(tempSessionId: string, userId: string | undefined, messages: UIMessage[]) {
  if (!userId) {
    console.error("‚ùå Cannot save session without a User ID.")
    return
  }

  const client = await pool.connect()
  try {
    const firstMessage = messages.find(m => m.role === 'user')
    let title = 'New Chat'
    if (firstMessage?.parts?.[0]?.type === 'text') {
      title = firstMessage.parts[0].text.slice(0, 50)
    }

    const sessionResult = await client.query(
      'INSERT INTO chat_sessions (title, user_id) VALUES ($1, $2) RETURNING id',
      [title, userId]
    )
    const permanentSessionId = sessionResult.rows[0].id

    const updateResult = await client.query(
      'UPDATE chat_messages SET session_id = $1 WHERE session_id = $2',
      [permanentSessionId, tempSessionId]
    )
  } catch (error) {
    console.error("‚ùå Error in createSessionAndUpdateMessages:", error)
    throw error // Re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô error
  } finally {
    client.release()
  }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Summary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Session ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 */
async function updateSessionSummary(sessionId: string, oldSummary: string, delta: string) {
  
  try {
    const model = new ChatOpenAI({ model: 'gpt-4o-mini' })
    const summarizerPrompt = ChatPromptTemplate.fromMessages([
      ['system', '‡∏£‡∏ß‡∏°‡∏™‡∏≤‡∏£‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö'],
      ['human', '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏¥‡∏°:\n{old}\n\n‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà:\n{delta}\n\n‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô']
    ])
    const summarizer = summarizerPrompt.pipe(model).pipe(new StringOutputParser())
    const updatedSummary = await summarizer.invoke({
      old: oldSummary || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤',
      delta: delta,
    })
    
    const result = await pool.query(
      'UPDATE chat_sessions SET summary = $1 WHERE id = $2 RETURNING id',
      [updatedSummary, sessionId]
    )

  } catch (e) {
    console.error(`‚ùå Failed to update summary for session ${sessionId}:`, e)
    throw e // Re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô error
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á Message Object ‡πÄ‡∏õ‡πá‡∏ô String ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ Summary
 */
function formatMessageForSummary(m: BaseMessage): string {
    if (m instanceof HumanMessage) return `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${m.content}`
    if (m instanceof AIMessage) return `‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢: ${m.content}`
    return `‡∏£‡∏∞‡∏ö‡∏ö: ${String(m.content)}`
}


// ===============================================
// GET API: ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏≤‡∏Å Session ID
// ===============================================
/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Session
 * 
 * Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session ID
 * 2. Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * 3. ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà UI ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
 * 4. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
 */
export async function GET(req: NextRequest) {
  try {
    // ===============================================
    // Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session ID ‡∏à‡∏≤‡∏Å URL Parameters
    // ===============================================
    const { searchParams } = new URL(req.url)
    const sessionId = searchParams.get('sessionId')
    if (!sessionId) {
      return new Response(
        JSON.stringify({ error: 'Session ID is required' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      )
    }

    // ===============================================
    // Step 2: Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // ===============================================
    const client = await pool.connect()
    try {
      const result = await client.query(
        `SELECT message, message->>'type' as message_type, created_at
         FROM chat_messages 
         WHERE session_id = $1 
         ORDER BY created_at ASC`,
        [sessionId]
      )
      
      // ===============================================
      // Step 3: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà UI ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      // ===============================================
      const messages = result.rows.map((row, i) => {
        const data = row.message
        let role = 'user'
        if (row.message_type === 'ai') role = 'assistant'
        else if (row.message_type === 'human') role = 'user'
        return {
          id: `history-${i}`,
          role,
          content: data.content || data.text || data.message || '',
          createdAt: row.created_at
        }
      })
      
      // ===============================================
      // Step 4: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
      // ===============================================
      return new Response(JSON.stringify({ messages }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
    } finally {
      client.release()
    }
  } catch (error) {
    console.error('Error fetching messages:', error)
    return new Response(
      JSON.stringify({
        error: 'Failed to fetch messages',
        details: error instanceof Error ? error.message : 'Unknown error'
      }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
}