/**
 * ===============================================
 * Document Loader, Embedding & PGVector API
 * ===============================================
 * 
 * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
 * - ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/
 * - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô embeddings ‡∏î‡πâ‡∏ß‡∏¢ OpenAI
 * - ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Supabase Vector Store (pgvector)
 * - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå .pdf, .txt ‡πÅ‡∏•‡∏∞ .csv
 * - Text splitting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö chunk ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
 * - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
 * 
 * API Endpoints:
 * - GET: ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings (‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)
 * - POST: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ similarity search
 * - PUT: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô vector store
 * - DELETE: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô vector store
 */

import { NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/server"

// LangChain & AI SDK Imports
import { DirectoryLoader } from "langchain/document_loaders/fs/directory"
import { TextLoader } from "langchain/document_loaders/fs/text"
import { CSVLoader } from "@langchain/community/document_loaders/fs/csv"
import { PDFLoader } from "@langchain/community/document_loaders/fs/pdf"
import { RecursiveCharacterTextSplitter } from "@langchain/textsplitters"
import { SupabaseVectorStore } from "@langchain/community/vectorstores/supabase"
import { OpenAIEmbeddings } from "@langchain/openai"
import { CacheBackedEmbeddings } from "langchain/embeddings/cache_backed"
import { InMemoryStore } from "@langchain/core/stores"

export const dynamic = 'force-dynamic'
export const maxDuration = 60 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

/**
 * GET API: ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô vector ‡∏ç‡∏¢store
 */
export async function GET() {
  try {
    console.log("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/...")
    
    // ===============================================
    // Step 0: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ - Clean Existing Data
    // ===============================================
    const supabase = await createClient();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    const { count: existingCount } = await supabase
      .from('documents')
      .select('*', { count: 'exact', head: true });

    if (existingCount && existingCount > 0) {
      console.log(`üóëÔ∏è ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ${existingCount} records - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô...`);
      
      const { error: deleteError } = await supabase
        .from('documents')
        .delete()
        .neq('id', 0); // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß

      if (deleteError) {
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ: ${deleteError.message}`);
      }
      
      console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ${existingCount} records ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } else {
      console.log("üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà");
    }
    
    // ===============================================
    // Step 1: ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πÄ‡∏£‡πá‡∏Å‡∏ó‡∏≠‡∏£‡∏µ - Document Loading
    // ===============================================
    const rawDocs = await new DirectoryLoader("./data", {
        ".txt": (path) => new TextLoader(path),
        ".csv": (path) => new CSVLoader(path, {
          column: undefined, // ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
          separator: ",",    // ‡πÉ‡∏ä‡πâ comma ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á
        }),
        ".pdf": (path) => new PDFLoader(path, {
          splitPages: false, // ‡πÑ‡∏°‡πà‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô document ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
          parsedItemSeparator: "\n" // ‡πÉ‡∏ä‡πâ \n ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á parsed items
        }),
    }).load();

    console.log(`üìÑ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${rawDocs.length} ‡πÑ‡∏ü‡∏•‡πå`)
    
    // ===============================================
    // Thai Text Processing ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    // ===============================================
    const processedDocs = rawDocs.map(doc => {
      const source = doc.metadata.source || '';
      const isPdfFile = source.toLowerCase().endsWith('.pdf');
      
      // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF
      if (isPdfFile) {
        console.log(`üîß ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${source}`);
        
        // ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        let cleanedContent = doc.pageContent;
        
        // 1. ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô "‡πÅ ‡∏•‡πá ‡∏õ ‡∏ó‡πá ‡∏≠ ‡∏õ" -> "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ"
        cleanedContent = cleanedContent.replace(/([‡∏Å-‡πô])\s+([‡∏Å-‡πô])/g, '$1$2');
        
        // 2. ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô "7 9 9 0 0 1 5" -> "7990015"
        cleanedContent = cleanedContent.replace(/(\d)\s+(\d)/g, '$1$2');
        
        // 3. ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô "C o m p u t e r" -> "Computer"
        cleanedContent = cleanedContent.replace(/([A-Za-z])\s+([A-Za-z])/g, '$1$2');
        
        // 4. ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡πÜ
        for (let i = 0; i < 3; i++) {
          cleanedContent = cleanedContent.replace(/([‡∏Å-‡πô])\s+([‡∏Å-‡πô])/g, '$1$2');
          cleanedContent = cleanedContent.replace(/(\d)\s+(\d)/g, '$1$2');
          cleanedContent = cleanedContent.replace(/([A-Za-z])\s+([A-Za-z])/g, '$1$2');
        }
        
        // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏¢‡∏Å
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        cleanedContent = cleanedContent.replace(/(\d)([A-Za-z‡∏Å-‡πô])/g, '$1 $2');
        cleanedContent = cleanedContent.replace(/([A-Za-z‡∏Å-‡πô])(\d)/g, '$1 $2');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô (uppercase letters)
        cleanedContent = cleanedContent.replace(/([a-z])([A-Z])/g, '$1 $2');
        
        // 6. ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
        cleanedContent = cleanedContent.replace(/\s+/g, ' ');
        
        // 7. ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        cleanedContent = cleanedContent.trim();
        
        return {
          ...doc,
          pageContent: cleanedContent
        };
      }
      
      // ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
      return doc;
    });
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    if (processedDocs.length > 0) {
      const firstDoc = processedDocs[0];
      const preview = firstDoc.pageContent.substring(0, 200);
      const isPdf = (firstDoc.metadata.source || '').toLowerCase().endsWith('.pdf');
      console.log(`üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°${isPdf ? '‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' : ''} (200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å): ${preview}`);
      console.log(`üìÅ ‡πÑ‡∏ü‡∏•‡πå: ${firstDoc.metadata.source}`);
    }

    if (rawDocs.length === 0) {
      return NextResponse.json({ 
        error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/",
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå .txt, .csv ‡∏´‡∏£‡∏∑‡∏≠ .pdf ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data/" 
      }, { status: 400 })
    }

    // ===============================================
    // Step 2: ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ (Text Splitting) - Chunking
    // ===============================================
    const splitter = new RecursiveCharacterTextSplitter({
        chunkSize: 1000,   // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î chunk ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
        chunkOverlap: 200, // ‡πÄ‡∏û‡∏¥‡πà‡∏° overlap ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á PDF
        separators: ["\n\n", "\n", ".", "!", "?", ",", " "], // ‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
    });

    const chunks = await splitter.splitDocuments(processedDocs);
    console.log(`‚úÇÔ∏è ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô ${chunks.length} ‡∏ä‡∏¥‡πâ‡∏ô`)

    // // ===============================================
    // // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‚úÖ
    // // ===============================================
    // console.log("\n--- üßê ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3 Chunks ‡πÅ‡∏£‡∏Å ---");
    
    // // ‡πÉ‡∏ä‡πâ slice(0, 3) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 3 chunks ‡πÅ‡∏£‡∏Å
    // chunks.slice(0, 3).forEach((chunk, index) => {
    //     console.log(`\n--- Chunk ${index + 1} ---`);
    //     console.log("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (Content):", chunk.pageContent);
    //     console.log("‡∏Ç‡∏ô‡∏≤‡∏î (Size):", chunk.pageContent.length);
    //     console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (Metadata):", chunk.metadata);
    //     console.log("---------------------\n");
    // });
    // // ===============================================

    // return NextResponse.json({ 
    //   message: `‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${rawDocs.length} ‡πÑ‡∏ü‡∏•‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô ${chunks.length} ‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
    //   stats: {
    //     previous_records: existingCount || 0,
    //     total_documents: rawDocs.length,
    //     total_chunks: chunks.length,
    //     files_processed: [...new Set(chunks.map(c => c.metadata.source))].map(source => {
    //       const filename = source.split('/').pop() || source.split('\\').pop()
    //       const fileChunks = chunks.filter(c => c.metadata.source === source)
    //       return {
    //         filename,
    //         chunks: fileChunks.length,
    //         total_chars: fileChunks.reduce((sum, c) => sum + c.pageContent.length, 0)
    //       }
    //     }),
    //     timestamp: new Date().toISOString()
    //   },
    //   success: true
    // })

    // ===============================================
    // Step 3: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Embeddings ‡πÅ‡∏•‡∏∞ Vector Store - Initialization
    // ===============================================
    const baseEmbeddings = new OpenAIEmbeddings({ 
      model: process.env.OPENAI_EMBEDDING_MODEL_NAME || 'text-embedding-3-small',
      dimensions: 1536 // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î embedding ‡∏Ñ‡∏∑‡∏≠ 1536 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Cache-backed embeddings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    const cacheStore = new InMemoryStore();
    const embeddings = CacheBackedEmbeddings.fromBytesStore(
      baseEmbeddings,
      cacheStore,
      {
        namespace: "document_embeddings" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î namespace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache
      }
    );

    const vectorStore = new SupabaseVectorStore(embeddings, {
        client: supabase,
        tableName: 'documents',
        queryName: 'match_documents' // ‡∏ä‡∏∑‡πà‡∏≠ function ‡πÉ‡∏ô Supabase
    });

    // ===============================================
    // Step 4: ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ chunk - Metadata Enrichment
    // ===============================================
    const chunksWithMetadata = chunks.map((chunk, index) => {
      const source = chunk.metadata.source || 'unknown'
      const filename = source.split('/').pop() || source.split('\\').pop() || 'unknown'
      
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î type ‡∏ï‡∏≤‡∏° file extension
      let fileType = 'text';
      if (filename.endsWith('.csv')) {
        fileType = 'csv';
      } else if (filename.endsWith('.pdf')) {
        fileType = 'pdf';
      } else if (filename.endsWith('.txt')) {
        fileType = 'text';
      }
      
      return {
        ...chunk,
        metadata: {
          ...chunk.metadata,
          filename,
          chunk_index: index,
          chunk_size: chunk.pageContent.length,
          timestamp: new Date().toISOString(),
          type: fileType
        }
      }
    })

    // ===============================================
    // Step 5: ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô vector store - Embeddings Creation
    // ===============================================
    console.log("üîÆ ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô vector store...")
    console.log("‚ö° ‡πÉ‡∏ä‡πâ CacheBackedEmbeddings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    
    await vectorStore.addDocuments(chunksWithMetadata);
    
    console.log("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô vector store ‡πÅ‡∏•‡πâ‡∏ß")

    // ===============================================
    // Step 6: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö response - Statistics Creation
    // ===============================================
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    const { count: newCount } = await supabase
      .from('documents')
      .select('*', { count: 'exact', head: true });

    const stats = {
      previous_records: existingCount || 0,
      new_records: newCount || 0,
      total_documents: rawDocs.length,
      total_chunks: chunks.length,
      files_processed: [...new Set(chunks.map(c => c.metadata.source))].map(source => {
        const filename = source.split('/').pop() || source.split('\\').pop()
        const fileChunks = chunks.filter(c => c.metadata.source === source)
        return {
          filename,
          chunks: fileChunks.length,
          total_chars: fileChunks.reduce((sum, c) => sum + c.pageContent.length, 0)
        }
      }),
      embedding_model: process.env.OPENAI_EMBEDDING_MODEL_NAME || 'text-embedding-3-small',
      vector_dimensions: 1536,
      timestamp: new Date().toISOString()
    }

    return NextResponse.json({ 
      message: `‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${existingCount ? `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ${existingCount} records ‡πÅ‡∏•‡∏∞` : ''}‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö ${chunks.length} chunks ‡∏à‡∏≤‡∏Å ${rawDocs.length} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£`,
      stats,
      success: true
    })

  } catch (error) {
    console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:', error)
    
    return NextResponse.json({ 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£',
      details: error instanceof Error ? error.message : 'Unknown error',
      success: false
    }, { status: 500 })
  }
}

/**
 * POST API: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÉ‡∏ô vector store
 */
export async function POST(req: NextRequest) {
  try {
    const { query, limit = 5 } = await req.json()
    
    if (!query) {
      return NextResponse.json({ 
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" 
      }, { status: 400 })
    }

    console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "${query}"`)
    console.log("‚ö° ‡πÉ‡∏ä‡πâ CacheBackedEmbeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    // ===============================================
    // Setup Vector Store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    // ===============================================
    const supabase = await createClient();
    
    const baseEmbeddings = new OpenAIEmbeddings({ 
      model: process.env.OPENAI_EMBEDDING_MODEL_NAME || 'text-embedding-3-small',
      dimensions: 1536
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Cache-backed embeddings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const cacheStore = new InMemoryStore();
    const embeddings = CacheBackedEmbeddings.fromBytesStore(
      baseEmbeddings,
      cacheStore,
      {
        namespace: "search_embeddings" // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î namespace ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      }
    );

    const vectorStore = new SupabaseVectorStore(embeddings, {
        client: supabase,
        tableName: 'documents',
        queryName: 'match_documents'
    });

    // ===============================================
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô
    // ===============================================
    const results = await vectorStore.similaritySearchWithScore(query, limit)
    
    console.log(`üìã ‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    // ===============================================
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    // ===============================================
    const formattedResults = results.map(([doc, score], index) => ({
      rank: index + 1,
      content: doc.pageContent,
      metadata: doc.metadata,
      relevance_score: score
    }))

    return NextResponse.json({
      query,
      results_count: results.length,
      results: formattedResults,
      success: true
    })

  } catch (error) {
    console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', error)
    
    return NextResponse.json({ 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
      details: error instanceof Error ? error.message : 'Unknown error',
      success: false
    }, { status: 500 })
  }
}

/**
 * DELETE API: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô vector store
 */
export async function DELETE() {
  try {
    const supabase = await createClient();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
    const { count: existingCount } = await supabase
      .from('documents')
      .select('*', { count: 'exact', head: true });

    if (!existingCount || existingCount === 0) {
      return NextResponse.json({ 
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏ö",
        deleted_records: 0,
        success: true
      })
    }

    console.log(`üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${existingCount} records...`);
    
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á documents
    const { error } = await supabase
      .from('documents')
      .delete()
      .neq('id', 0) // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà id ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0 (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß)

    if (error) {
      throw new Error(error.message)
    }

    console.log(`‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${existingCount} records ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)

    return NextResponse.json({ 
      message: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô vector store ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏•‡∏ö‡πÑ‡∏õ ${existingCount} records`,
      deleted_records: existingCount,
      timestamp: new Date().toISOString(),
      success: true
    })

  } catch (error) {
    console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error)
    
    return NextResponse.json({ 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      details: error instanceof Error ? error.message : 'Unknown error',
      success: false
    }, { status: 500 })
  }
}

/**
 * PUT API: ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô vector store
 */
export async function PUT() {
  try {
    const supabase = await createClient();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const { count: totalCount } = await supabase
      .from('documents')
      .select('*', { count: 'exact', head: true });

    if (!totalCount || totalCount === 0) {
      return NextResponse.json({ 
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        stats: {
          total_records: 0,
          files_breakdown: [],
          timestamp: new Date().toISOString()
        },
        success: true
      })
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const { data: documents } = await supabase
      .from('documents')
      .select('metadata')
      .limit(1000); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ

    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö file stats
    interface FileStats {
      filename: string;
      type: string;
      chunks: number;
      total_chars: number;
    }

    const fileStats = documents?.reduce((acc: Record<string, FileStats>, doc) => {
      const filename = doc.metadata?.filename || 'unknown';
      const type = doc.metadata?.type || 'unknown';
      
      if (!acc[filename]) {
        acc[filename] = {
          filename,
          type,
          chunks: 0,
          total_chars: 0
        };
      }
      
      acc[filename].chunks += 1;
      acc[filename].total_chars += doc.metadata?.chunk_size || 0;
      
      return acc;
    }, {}) || {};

    const stats = {
      total_records: totalCount,
      files_breakdown: Object.values(fileStats),
      files_count: Object.keys(fileStats).length,
      timestamp: new Date().toISOString()
    };

    console.log(`üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${totalCount} records ‡∏à‡∏≤‡∏Å ${Object.keys(fileStats).length} ‡πÑ‡∏ü‡∏•‡πå`);

    return NextResponse.json({ 
      message: `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${totalCount} records ‡∏à‡∏≤‡∏Å ${Object.keys(fileStats).length} ‡πÑ‡∏ü‡∏•‡πå`,
      stats,
      success: true
    })

  } catch (error) {
    console.error('‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error)
    
    return NextResponse.json({ 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      details: error instanceof Error ? error.message : 'Unknown error',
      success: false
    }, { status: 500 })
  }
}